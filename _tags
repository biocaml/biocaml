# OASIS_START
# DO NOT EDIT (digest: d257414835eec2ab82756b5e4dc4e548)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library biocaml
"src/lib/biocaml.cmxs": use_biocaml
<src/lib/*.ml{,i}>: oasis_library_biocaml_ccopt
"src/lib/biocaml_pwm_stub.c": oasis_library_biocaml_ccopt
"src/lib/biocaml_mzData_stubs.c": oasis_library_biocaml_ccopt
<src/lib/biocaml.{cma,cmxa}>: use_libbiocaml_stubs
<src/lib/*.ml{,i}>: pkg_threads
<src/lib/*.ml{,i}>: pkg_unix
<src/lib/*.ml{,i}>: pkg_batteries
<src/lib/*.ml{,i}>: pkg_core
<src/lib/*.ml{,i}>: pkg_sexplib.syntax
<src/lib/*.ml{,i}>: pkg_zip
<src/lib/*.ml{,i}>: pkg_sqlite3
<src/lib/*.ml{,i}>: pkg_xmlm
<src/lib/*.ml{,i}>: pkg_pcre
"src/lib/biocaml_pwm_stub.c": pkg_threads
"src/lib/biocaml_pwm_stub.c": pkg_unix
"src/lib/biocaml_pwm_stub.c": pkg_batteries
"src/lib/biocaml_pwm_stub.c": pkg_core
"src/lib/biocaml_pwm_stub.c": pkg_sexplib.syntax
"src/lib/biocaml_pwm_stub.c": pkg_zip
"src/lib/biocaml_pwm_stub.c": pkg_sqlite3
"src/lib/biocaml_pwm_stub.c": pkg_xmlm
"src/lib/biocaml_pwm_stub.c": pkg_pcre
"src/lib/biocaml_mzData_stubs.c": pkg_threads
"src/lib/biocaml_mzData_stubs.c": pkg_unix
"src/lib/biocaml_mzData_stubs.c": pkg_batteries
"src/lib/biocaml_mzData_stubs.c": pkg_core
"src/lib/biocaml_mzData_stubs.c": pkg_sexplib.syntax
"src/lib/biocaml_mzData_stubs.c": pkg_zip
"src/lib/biocaml_mzData_stubs.c": pkg_sqlite3
"src/lib/biocaml_mzData_stubs.c": pkg_xmlm
"src/lib/biocaml_mzData_stubs.c": pkg_pcre
# Executable gff_counts
<src/app/gff_counts.{native,byte}>: use_biocaml
<src/app/gff_counts.{native,byte}>: pkg_threads
<src/app/gff_counts.{native,byte}>: pkg_unix
<src/app/gff_counts.{native,byte}>: pkg_batteries
<src/app/gff_counts.{native,byte}>: pkg_getopt
<src/app/gff_counts.{native,byte}>: pkg_core
<src/app/gff_counts.{native,byte}>: pkg_sexplib.syntax
<src/app/gff_counts.{native,byte}>: pkg_zip
<src/app/gff_counts.{native,byte}>: pkg_sqlite3
<src/app/gff_counts.{native,byte}>: pkg_xmlm
<src/app/gff_counts.{native,byte}>: pkg_pcre
# Executable gff_to_bed
<src/app/gff_to_bed.{native,byte}>: use_biocaml
<src/app/gff_to_bed.{native,byte}>: pkg_threads
<src/app/gff_to_bed.{native,byte}>: pkg_unix
<src/app/gff_to_bed.{native,byte}>: pkg_batteries
<src/app/gff_to_bed.{native,byte}>: pkg_getopt
<src/app/gff_to_bed.{native,byte}>: pkg_core
<src/app/gff_to_bed.{native,byte}>: pkg_sexplib.syntax
<src/app/gff_to_bed.{native,byte}>: pkg_zip
<src/app/gff_to_bed.{native,byte}>: pkg_sqlite3
<src/app/gff_to_bed.{native,byte}>: pkg_xmlm
<src/app/gff_to_bed.{native,byte}>: pkg_pcre
# Executable gff_to_table
<src/app/gff_to_table.{native,byte}>: use_biocaml
<src/app/gff_to_table.{native,byte}>: pkg_threads
<src/app/gff_to_table.{native,byte}>: pkg_unix
<src/app/gff_to_table.{native,byte}>: pkg_batteries
<src/app/gff_to_table.{native,byte}>: pkg_getopt
<src/app/gff_to_table.{native,byte}>: pkg_core
<src/app/gff_to_table.{native,byte}>: pkg_sexplib.syntax
<src/app/gff_to_table.{native,byte}>: pkg_zip
<src/app/gff_to_table.{native,byte}>: pkg_sqlite3
<src/app/gff_to_table.{native,byte}>: pkg_xmlm
<src/app/gff_to_table.{native,byte}>: pkg_pcre
# Executable sgr_to_wig
<src/app/sgr_to_wig.{native,byte}>: use_biocaml
<src/app/sgr_to_wig.{native,byte}>: pkg_threads
<src/app/sgr_to_wig.{native,byte}>: pkg_unix
<src/app/sgr_to_wig.{native,byte}>: pkg_batteries
<src/app/sgr_to_wig.{native,byte}>: pkg_getopt
<src/app/sgr_to_wig.{native,byte}>: pkg_core
<src/app/sgr_to_wig.{native,byte}>: pkg_sexplib.syntax
<src/app/sgr_to_wig.{native,byte}>: pkg_zip
<src/app/sgr_to_wig.{native,byte}>: pkg_sqlite3
<src/app/sgr_to_wig.{native,byte}>: pkg_xmlm
<src/app/sgr_to_wig.{native,byte}>: pkg_pcre
# Executable wig_correlate
<src/app/wig_correlate.{native,byte}>: use_biocaml
<src/app/wig_correlate.{native,byte}>: pkg_threads
<src/app/wig_correlate.{native,byte}>: pkg_unix
<src/app/wig_correlate.{native,byte}>: pkg_batteries
<src/app/wig_correlate.{native,byte}>: pkg_getopt
<src/app/wig_correlate.{native,byte}>: pkg_core
<src/app/wig_correlate.{native,byte}>: pkg_sexplib.syntax
<src/app/wig_correlate.{native,byte}>: pkg_zip
<src/app/wig_correlate.{native,byte}>: pkg_sqlite3
<src/app/wig_correlate.{native,byte}>: pkg_xmlm
<src/app/wig_correlate.{native,byte}>: pkg_pcre
<src/app/*.ml{,i}>: pkg_getopt
# Executable biocaml
<src/app/biocaml_main.{native,byte}>: use_biocaml
<src/app/biocaml_main.{native,byte}>: pkg_lwt.unix
<src/app/biocaml_main.{native,byte}>: pkg_core_extended
<src/app/biocaml_main.{native,byte}>: pkg_threads
<src/app/biocaml_main.{native,byte}>: pkg_unix
<src/app/biocaml_main.{native,byte}>: pkg_batteries
<src/app/biocaml_main.{native,byte}>: pkg_lwt
<src/app/biocaml_main.{native,byte}>: pkg_core
<src/app/biocaml_main.{native,byte}>: pkg_sexplib.syntax
<src/app/biocaml_main.{native,byte}>: pkg_zip
<src/app/biocaml_main.{native,byte}>: pkg_sqlite3
<src/app/biocaml_main.{native,byte}>: pkg_xmlm
<src/app/biocaml_main.{native,byte}>: pkg_pcre
<src/app/*.ml{,i}>: use_biocaml
<src/app/*.ml{,i}>: pkg_lwt.unix
<src/app/*.ml{,i}>: pkg_core_extended
<src/app/*.ml{,i}>: pkg_threads
<src/app/*.ml{,i}>: pkg_unix
<src/app/*.ml{,i}>: pkg_batteries
<src/app/*.ml{,i}>: pkg_lwt
<src/app/*.ml{,i}>: pkg_core
<src/app/*.ml{,i}>: pkg_sexplib.syntax
<src/app/*.ml{,i}>: pkg_zip
<src/app/*.ml{,i}>: pkg_sqlite3
<src/app/*.ml{,i}>: pkg_xmlm
<src/app/*.ml{,i}>: pkg_pcre
# Executable tests_main
"src/tests/main.native": use_biocaml
"src/tests/main.native": pkg_threads
"src/tests/main.native": pkg_unix
"src/tests/main.native": pkg_oUnit
"src/tests/main.native": pkg_batteries
"src/tests/main.native": pkg_core
"src/tests/main.native": pkg_sexplib.syntax
"src/tests/main.native": pkg_zip
"src/tests/main.native": pkg_sqlite3
"src/tests/main.native": pkg_xmlm
"src/tests/main.native": pkg_pcre
<src/tests/*.ml{,i}>: use_biocaml
<src/tests/*.ml{,i}>: pkg_threads
<src/tests/*.ml{,i}>: pkg_unix
<src/tests/*.ml{,i}>: pkg_oUnit
<src/tests/*.ml{,i}>: pkg_batteries
<src/tests/*.ml{,i}>: pkg_core
<src/tests/*.ml{,i}>: pkg_sexplib.syntax
<src/tests/*.ml{,i}>: pkg_zip
<src/tests/*.ml{,i}>: pkg_sqlite3
<src/tests/*.ml{,i}>: pkg_xmlm
<src/tests/*.ml{,i}>: pkg_pcre
# Executable lwt_tests
"src/lwt_tests/main.native": use_biocaml
"src/lwt_tests/main.native": pkg_lwt.unix
"src/lwt_tests/main.native": pkg_core_extended
"src/lwt_tests/main.native": pkg_threads
"src/lwt_tests/main.native": pkg_unix
"src/lwt_tests/main.native": pkg_batteries
"src/lwt_tests/main.native": pkg_core
"src/lwt_tests/main.native": pkg_sexplib.syntax
"src/lwt_tests/main.native": pkg_zip
"src/lwt_tests/main.native": pkg_sqlite3
"src/lwt_tests/main.native": pkg_xmlm
"src/lwt_tests/main.native": pkg_pcre
<src/lwt_tests/*.ml{,i}>: use_biocaml
<src/lwt_tests/*.ml{,i}>: pkg_lwt.unix
<src/lwt_tests/*.ml{,i}>: pkg_core_extended
<src/lwt_tests/*.ml{,i}>: pkg_threads
<src/lwt_tests/*.ml{,i}>: pkg_unix
<src/lwt_tests/*.ml{,i}>: pkg_batteries
<src/lwt_tests/*.ml{,i}>: pkg_core
<src/lwt_tests/*.ml{,i}>: pkg_sexplib.syntax
<src/lwt_tests/*.ml{,i}>: pkg_zip
<src/lwt_tests/*.ml{,i}>: pkg_sqlite3
<src/lwt_tests/*.ml{,i}>: pkg_xmlm
<src/lwt_tests/*.ml{,i}>: pkg_pcre
# OASIS_STOP

<src/*/*.ml{,i}>: syntax_camlp4o

true: annot, debug
